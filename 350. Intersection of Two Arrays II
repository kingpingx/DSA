Question : https://leetcode.com/problems/intersection-of-two-arrays-ii/

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
       //since we are going to use two pointer technique here so for that purpose our array needs to be sorted..
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int i=0,j=0;
        vector<int>res; 
        int m = nums1.size(),n= nums2.size();
        while(i<m && j<n){
            //firstly we check which element is smaller element if we don't find the similar element in second array then we should move our pointer one step ahead as we are not gonna get that element again..
            if(nums1[i]<nums2[j]){ 
                i++;
            }else if(nums2[j]<nums1[i]){
                j++;
            }else{ 
                //if both the array have same element that means we have to store it becuase interesectionjm means the common elements present in both tha arrays
                res.push_back(nums1[i]);
                i++;
                j++;
            }
        }
        return res;
        
    }
};



Another Approach : 

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> a;
        int n1=nums1.size(), n2=nums2.size();
        map<int,int> m1,m2;
        map<int, int> :: iterator it1, it2;
        
        for(int i=0; i<n1;i++)
        {
            it1 = m1.find(nums1[i]);
            if(it1!=m1.end())
            {
                it1->second++;
            }
            m1.insert({nums1[i],1});
        }
      
        for(int i=0; i<n2;i++)
        {
            it2 = m2.find(nums2[i]);
            if(it2!=m2.end())
            {
                it2->second++;
            }
            m2.insert({nums2[i],1});
        }
       
        int loop=min(m1.size(),m2.size());
        if(loop==m1.size())
        {
            for(auto &e: m1)
            {
                it1 = m1.find(e.first);
                it2 = m2.find(e.first);
                if(it1!= m1.end() && it2!=m2.end())
                { 
                    for(int i=0; i<min(it1->second, it2->second); i++)
                    {
                        a.push_back(it1->first);
                    }
                }
            }
        }
        else
        {
             for(auto &e: m2)
            {
                it1 = m1.find(e.first);
                it2 = m2.find(e.first);
                if(it1!= m1.end() && it2!=m2.end())
                { 
                    for(int i=0; i<min(it1->second, it2->second); i++)
                    {
                        a.push_back(it1->first);
                    }
                }
            }
        }
        return a;
        
    }
};
